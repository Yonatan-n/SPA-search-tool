{"version":3,"sources":["consts.js","searchSlice.js","utils.js","SearchBar.js","DisplayResults.js","App.js","reportWebVitals.js","store.js","index.js"],"names":["PROTOCOLS","ACTIONS","SERVER_URL","AUTO_COMPLETE","SEARCH_MATCH","searchSlice","createSlice","name","initialState","source_port","dest_port","protocols","actions","query_result","page","total","auto_complete","complete_field","reducers","change_str_prop","state","action","payload","value","prop","toggle_list_value","list","includes","filter","item","push","change_page","update_total","set_auto_complete","set_query_result","results","set_complete_field","move_page","makeFields","fields","Number","length","fetchJson","params","a","body","route","_hash","objectHash","MD5","str_json","window","sessionStorage","getItem","JSON","parse","fetch","method","headers","Accept","stringify","then","resp","json","respJson","setItem","catch","e","console","error","dispatch","word","search","data","map","toString","sendSearch","newTotal","newQueryResults","useDebounce","dependencies","callBack","callBackArg","useEffect","timer","setTimeout","clearTimeout","CheckBoxInput","labelName","immList","listName","namerFunc","useDispatch","useSelector","Box","m","FormGroup","Card","CardContent","FormLabel","component","FormControlLabel","control","Checkbox","checked","onChange","_event","preventDefault","label","InputText","clearAutoComplete","options","rest","marginTop","marginBottom","Autocomplete","variant","id","getOptionLabel","option","freeSolo","onFocus","onInputChange","onBlur","renderInput","TextField","SearchBar","changeStrProp","getAutoComplete","_","Grid","container","direction","type","updateValidate","set","test","DisplayResults","rows","style","height","width","columns","field","headerName","flex","sortable","valueGetter","row","pagination","pageSize","rowCount","paginationMode","onPageChange","changes","App","useState","isDark","setIsDark","theme","createMuiTheme","palette","primary","main","secondary","localStorage","ThemeProvider","CssBaseline","Container","maxWidth","Fab","color","margin","top","right","bottom","left","position","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","searchReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.de4de91d.chunk.js","sourcesContent":["const PROTOCOLS = [\"TCP\", \"UDP\"]\nconst ACTIONS = [true, false] // accepted or dropped  \nconst PORT_RANGE = 65535\nconst PER_PAGE = 30\nconst DEBOUNCE_VALUE = 500; // ms\nconst SERVER_PORT = 5000\nconst SERVER_URL = `http://localhost:${SERVER_PORT}`\nconst AUTO_COMPLETE = \"autocomplete\"\nconst SEARCH_MATCH = \"search-match\"\n\n\nexport {\n    PROTOCOLS,\n    ACTIONS,\n    PORT_RANGE,\n    PER_PAGE,\n    DEBOUNCE_VALUE,\n    SERVER_PORT,\n    SERVER_URL,\n    SEARCH_MATCH,\n    AUTO_COMPLETE\n}","import { createSlice } from '@reduxjs/toolkit'\nimport { PROTOCOLS, ACTIONS } from './consts'\nexport const searchSlice = createSlice({\n  name: 'search',\n  initialState: {\n    source_port: \"\",\n    dest_port: \"\",\n    protocols: PROTOCOLS,\n    actions: ACTIONS,\n    query_result: [],\n    page: 0,\n    total: null,\n    auto_complete: [],\n    complete_field: \"\",\n  },\n  reducers: {\n    change_str_prop: (state, action) => {\n      const { value, prop } = action.payload;\n      state[prop] = value;\n    },\n    toggle_list_value: (state, action) => {\n      const { list, value } = action.payload;\n      if (state[list].includes(value))\n        state[list] = state[list].filter(item => item !== value)\n      else state[list].push(value);\n    },\n    change_page: (state, action) => {\n      const { value } = action.payload;\n      state.page += value\n    },\n    update_total: (state, action) => {\n      state.total = action.payload.value\n    },\n    set_auto_complete: (state, action) => {\n      state.auto_complete = action.payload.value;\n    },\n    set_query_result: (state, action) => {\n      const { results, page, total } = action.payload\n      state.query_result = results\n      state.page = page\n      state.total = total\n    },\n    set_complete_field: (state, action) => {\n      const { value } = action.payload;\n      state.complete_field = value;\n    },\n    move_page: (state, action) => {\n      const { value } = action.payload;\n      state.page = value;\n    }\n\n  },\n})\n\n// Action creators are generated for each case reducer function\nexport const { change_str_prop,\n  toggle_list_value,\n  change_page,\n  update_total,\n  set_auto_complete,\n  set_query_result,\n  set_complete_field,\n  move_page\n} = searchSlice.actions\n\n\nexport default searchSlice.reducer\n","import { useEffect } from \"react\";\nimport { set_query_result, set_auto_complete } from \"./searchSlice\";\nimport {\n  SERVER_URL,\n  AUTO_COMPLETE,\n  SEARCH_MATCH,\n  DEBOUNCE_VALUE,\n} from \"./consts\";\nimport objectHash from \"object-hash\";\n\nfunction makeFields({ source_port = \"\", dest_port = \"\", protocols, actions }) {\n  let fields = {}; // mutate props\n  if (!!dest_port && dest_port !== \"\")\n    fields[\"dest_port\"] = [Number(dest_port)];\n  if (!!source_port && source_port !== \"\")\n    fields[\"source_port\"] = [Number(source_port)];\n  if (actions && actions.length !== 0) fields[\"action\"] = actions;\n  if (protocols && protocols.length !== 0) fields[\"protocol\"] = protocols;\n  return fields;\n}\n\nasync function fetchJson(params) {\n  const { body, route } = params;\n  const _hash =\n    objectHash.MD5(params); /* hash params, used to cache fetch response  */\n  let str_json = window.sessionStorage.getItem(_hash); /* json or null */\n  if (str_json !== null) {\n    return JSON.parse(str_json);\n  }\n\n  return fetch(`${SERVER_URL}/${route}`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(body),\n  })\n    .then((resp) => resp.json())\n    .then((respJson) => {\n      window.sessionStorage.setItem(\n        _hash,\n        JSON.stringify(respJson)\n      ); /* store response */\n      return respJson;\n    })\n    .catch((e) => console.error(e));\n}\n\nasync function getAutoComplete({ dispatch, complete_field, word, search }) {\n  if (!complete_field) return;\n  const { protocols, actions } = search;\n  const { data } = await fetchJson({\n    route: AUTO_COMPLETE,\n    body: {\n      complete_field: complete_field,\n      word: word || \"\",\n      fields: makeFields({ protocols, actions }),\n    },\n  });\n  dispatch(\n    set_auto_complete({\n      value: data.map((item) => item[complete_field].toString()),\n    })\n  );\n  sendSearch({ search, dispatch }); // trigger search, to update the data table while typing\n}\n\nasync function sendSearch({ search, dispatch }) {\n  const { source_port, dest_port, protocols, actions, page } = search;\n  const { total: newTotal, data: newQueryResults } = await fetchJson({\n    route: SEARCH_MATCH,\n    body: {\n      page: page,\n      fields: makeFields({ source_port, dest_port, protocols, actions }),\n    },\n  });\n\n  dispatch(\n    set_query_result({ total: newTotal, page, results: newQueryResults })\n  );\n}\n\nfunction useDebounce({ dependencies, callBack, callBackArg }) {\n  useEffect(() => {\n    const timer = window.setTimeout(() => {\n      callBack(callBackArg); /* timed out, call callBack */\n    }, DEBOUNCE_VALUE);\n    return () => {\n      window.clearTimeout(timer); /* another call before timeout, reset counter */\n    };\n    // eslint-disable-next-line\n  }, [...dependencies, callBack, callBackArg]);\n}\n\nexport { sendSearch, getAutoComplete, useDebounce };\n","import { PORT_RANGE, PROTOCOLS, ACTIONS } from \"./consts\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  Checkbox,\n  Card,\n  CardContent,\n  Grid,\n  Box,\n  FormGroup,\n  FormControlLabel,\n  FormLabel,\n  TextField,\n} from \"@material-ui/core\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { sendSearch, getAutoComplete, useDebounce } from \"./utils\";\nimport {\n  change_str_prop,\n  toggle_list_value,\n  set_complete_field,\n  set_auto_complete,\n} from \"./searchSlice\";\n\nfunction CheckBoxInput({ labelName, immList, listName, namerFunc }) {\n  const dispatch = useDispatch();\n  const list = useSelector((state) => state.search[listName]);\n  const toggleListValue = (value) => (_event) => {\n    _event.preventDefault();\n    dispatch(toggle_list_value({ list: listName, value }));\n  };\n  return (\n    <Box m={1}>\n      <FormGroup>\n        <Card>\n          <CardContent>\n            <FormLabel component=\"legend\">{labelName}</FormLabel>\n            {immList.map((item) => {\n              const name = namerFunc(item); // used for the action verdict, true/false to Accepted/Dropped\n              return (\n                <FormControlLabel\n                  key={`${item}${list.includes(item)}`}\n                  control={\n                    <Checkbox\n                      checked={list.includes(item)}\n                      onChange={toggleListValue(item)}\n                      name={name}\n                    />\n                  }\n                  label={name}\n                />\n              );\n            })}\n          </CardContent>\n        </Card>\n      </FormGroup>\n    </Box>\n  );\n}\n\nfunction InputText({ labelName, clearAutoComplete, options, ...rest }) {\n  return (\n    <Box marginTop={1} marginBottom={1}>\n      <Autocomplete\n        variant=\"filled\"\n        id={labelName}\n        options={options}\n        getOptionLabel={(option) => option}\n        freeSolo\n        onFocus={rest.onInputChange}\n        onChange={rest.onInputChange}\n        onBlur={clearAutoComplete}\n        {...rest}\n        renderInput={(params) => (\n          <TextField {...params} variant=\"filled\" label={labelName} />\n        )}\n      />\n    </Box>\n  );\n}\n\nexport default function SearchBar() {\n  const dispatch = useDispatch();\n  const changeStrProp = (prop) => (value) => {\n    dispatch(set_complete_field({ value: prop }));\n    dispatch(change_str_prop({ prop, value }));\n  };\n  const search = useSelector((state) => state.search);\n  const {\n    source_port,\n    dest_port,\n    protocols,\n    actions,\n    auto_complete,\n    complete_field,\n  } = search;\n\n  useDebounce({\n    dependencies: [source_port, dest_port, complete_field, protocols, actions],\n    callBack: ({ complete_field, search }) => {\n      if (complete_field.length > 0) {\n        getAutoComplete({\n          complete_field,\n          dispatch,\n          word: search[complete_field],\n          search,\n        });\n      } else {\n        sendSearch({ search, dispatch });\n      }\n    },\n    callBackArg: { search, complete_field },\n  });\n\n  const clearAutoComplete = (_) => {\n    dispatch(set_auto_complete({ value: [] }));\n  };\n  return (\n    <form>\n      <Grid container direction={\"column\"}>\n        <InputText\n          clearAutoComplete={clearAutoComplete}\n          options={auto_complete}\n          labelName=\"Source Port\"\n          type=\"text\"\n          value={source_port}\n          onInputChange={updateValidate(\n            changeStrProp(\"source_port\"),\n            auto_complete\n          )}\n        />\n        <InputText\n          clearAutoComplete={clearAutoComplete}\n          options={auto_complete}\n          type=\"text\"\n          value={dest_port}\n          onInputChange={updateValidate(\n            changeStrProp(\"dest_port\"),\n            auto_complete\n          )}\n          labelName=\"Destination Port\"\n        />\n        <CheckBoxInput\n          labelName={\"Protocols:\"}\n          immList={PROTOCOLS}\n          listName={\"protocols\"}\n          namerFunc={(name) => name}\n        />\n        <CheckBoxInput\n          labelName={\"Action verdict:\"}\n          immList={ACTIONS}\n          listName={\"actions\"}\n          namerFunc={(name) => (name ? \"Accepted\" : \"Dropped\")}\n        />\n      </Grid>\n    </form>\n  );\n}\n\nfunction updateValidate(set, auto_complete) {\n  return (e, value) => {\n    if (e === null) return; /* triggered null  after autocomplete, ignore  */\n    e?.preventDefault();\n    const re = /^[0-9]+$/g; /* only digits, check for range later */\n    if (!value) set(\"\"); /* empty string, triggered on delete input */\n    if (typeof value === \"number\") {\n      /* auto completed */\n      return set(auto_complete[value]);\n    }\n    if (re.test(value) && Number(value) <= PORT_RANGE) set(value);\n  };\n}\n","import { useDispatch, useSelector } from \"react-redux\";\n\nimport { PER_PAGE } from \"./consts\";\nimport { DataGrid } from \"@material-ui/data-grid\";\nimport { sendSearch, useDebounce } from \"./utils.js\";\nimport { move_page } from \"./searchSlice\";\n\nfunction DisplayResults() {\n  const dispatch = useDispatch();\n  const search = useSelector((state) => state.search);\n  const { query_result, page, total } = search;\n  const columns = [\n    {\n      field: \"action\",\n      headerName: \"Verdict\",\n      flex: 1,\n      sortable: false,\n      valueGetter: (params) => (params.row.action ? \"Accepted\" : \"Dropped\"),\n    },\n    { field: \"source_ip\", headerName: \"Source IPV4\", flex: 1 },\n    { field: \"source_port\", headerName: \"Source port\", flex: 1 },\n    { field: \"dest_ip\", headerName: \"Dest IPV4\", flex: 1 },\n    { field: \"dest_port\", headerName: \"Dest port\", flex: 1 },\n    { field: \"protocol\", headerName: \"Protocol\", flex: 1 },\n  ];\n  const rows = query_result;\n  useDebounce({\n    dependencies: [page],\n    callBack: ({ search }) => sendSearch({ search, dispatch }),\n    callBackArg: { search },\n  });\n\n  return (\n    <div style={{ height: \"70vh\", width: \"100%\" }}>\n      <DataGrid\n        rows={rows}\n        columns={columns}\n        pagination\n        pageSize={PER_PAGE}\n        rowCount={total}\n        paginationMode=\"server\"\n        onPageChange={(changes) => dispatch(move_page({ value: changes.page }))}\n      />\n    </div>\n  );\n}\n\nexport default DisplayResults;\n","import SearchBar from \"./SearchBar\";\nimport DisplayResults from \"./DisplayResults\";\nimport { useEffect, useState } from \"react\";\nimport { Container, CssBaseline, Fab } from \"@material-ui/core\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport InvertColorsIcon from \"@material-ui/icons/InvertColors\";\nimport { SERVER_URL } from \"./consts\";\n\nfunction App() {\n  const [isDark, setIsDark] = useState(true);\n  const theme = createMuiTheme({\n    palette: isDark\n      ? {\n        type: \"dark\",\n        primary: {\n          main: \"#e9c46a\",\n        },\n        secondary: {\n          main: \"#e9c46a\",\n        },\n      }\n      : {\n        type: \"light\",\n        primary: {\n          main: \"#006d77\",\n        },\n        secondary: {\n          main: \"#006d77\",\n        },\n      },\n  });\n  const fab_style = {\n    margin: 0,\n    top: \"auto\",\n    right: 20,\n    bottom: 20,\n    left: \"auto\",\n    position: \"fixed\",\n  };\n  useEffect(() => {\n    // dark/light mode\n    setIsDark(Number(window.localStorage.getItem(\"isDark\")));\n    // is elastic populated?\n    // if (!window.localStorage.getItem('pop-db')) {\n    //   fetch(`${SERVER_URL}/populate-elastic'`, {\n    //     method: \"POST\"\n    //   })\n    //     .then(() => window.localStorage.setItem('pop-db', 'true'));\n    // }\n  }, []);\n\n  useEffect(() => {\n    window.localStorage.setItem(\"isDark\", Number(isDark));\n  }, [isDark]);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Container maxWidth=\"md\">\n        <header>\n          <h1>\n            Search Tool <SearchIcon />\n          </h1>\n        </header>\n        <SearchBar />\n        <DisplayResults />\n        <Fab\n          color={\"secondary\"}\n          style={fab_style}\n          onClick={() => setIsDark((isDark) => !isDark)}\n        >\n          <InvertColorsIcon />\n        </Fab>\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\nimport searchReducer from './searchSlice'\nexport default configureStore({\n    reducer: {\n        search: searchReducer,\n    },\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@fontsource/roboto';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}